Book: Assembly Language for x86 processor - seventh edition
NOTE: convert masm to nasm: https://left404.com/2011/01/04/converting-x86-assembly-from-masm-to-nasm-3/

1. Basic concepts:
	1.1. Welcome to Assembly Language:

3. Assembly Language Fundamentals:
	3.1. Basic language elements:
		3.1.1. First Assembly Language Program:
			+ Let's look at a simple assembly language program that adds two numbers \
				and save the result in a register. \
				We will call it the AddTwo program:
					
				1: main PROC
				2: mov eax,5 ; move 5 to the eax register
				3: add eax,6 ; add 6 to the eax register
				4:
				5: INVOKE ExitProcess,0 ; end the program
				6: main ENDP
			
			+ let's go through the program one line at a time: \
				Line 1 starts the main procedure, the entry point for the program. \
				Line 2 places the integer 5 in the eax register. \
				Line 3 adds 6 to the value in EAX, giving it a new value of 11. \
				Line 5 calls a Windows service (also known as a function) named ExitProcess that halts the program and \
				returns control to the OS. \
				Line 6 is the ending marker of the main procedure.
				
			3.1.1.1. Adding a Variable:
				+ Let's make our program a little more intersting by saving the results of our addition in variable named sum. \
					To do this, we will add a couple of markers, or declarations, \
					That identify the code and data areas of the program:
					
					1: .data 		; this is the data area
					2: sum DWORD 0 	; create a variable named sum
					3:
					4: .code 		; this is the code area
					5: main PROC
					6: mov eax,5 	; move 5 to the eax register
					7: add eax,6 	; add 6 to the eax register
					8: mov sum,eax
					9:
					10: INVOKE ExitProcess,0 ; end the program
					11: main ENDP
					
				+ The sum variable is declared on Line 2, \
					where we give it a size of 32 bits, \
					using the DWORD keyword. \
					
				+ By the way, those code and data areas we mentioned, \
					which were marked by the .code and .data directives, are called segments. \
					So you have the code segment and the data segment. \
					Later on, we will see a third segment named stack.
					
		3.1.2. Integer Literals:
			+ An integer literal is made up of an optional leading sign, \
				one or more digits, and optional radix characters that indicates the number's base:
					
				[{+ | - }] digits [ radix ]

			+ So, for example, 26 is a valid integer literal. Here are the possible radix values:
				h 		hexadecimal 		r 	encoded real
				q/o 	octal 				t 	decimal (alternate)
				d 		decimal 			y 	binary (alternate)
				b 		binary

			+ And here are some integer literals declared with various radixes. \
				Each line contains a comment:
				
				26 			; decimal
				26d 		; decimal
				11010011b 	; binary
				42q 		; octal
				42o 		; octal
				1Ah 		; hexadecimal
				0A3h 		; hexadecimal

		3.1.3. Constant Integer Expressions:
			+ A constant integer expression is mathematical expression involving integer literals \
				and arithmetic operators.
				
			+  Arithmetic Operators:
				Operator 		Name 					Precedence Level
				( ) 			Parentheses 			1
				+, - 			Unary plus, minus 		2
				*, / 			Multiply, divide 		3
				MOD 			Modulus 				3
				+, -			Add, subtract 			4
		
		3.1.4. Real number literals:
		
			[sign]integer.[integer][exponent]

		3.1.5. Character Literals:
			+ A character literal is a single character enclosed in single or double quotes. \
				The assembler stores the value in memory as the character’s binary ASCII code. \
				Examples are: 
				'A'
				"d"
		3.1.6. String Literals:
			+ A string literal is a sequence of characters (including spaces) \
				enclosed in single or double quotes:
				
				'ABC'
				'X'
				"Good night, Gracie"
				'4096'

			+ So, for example, the string literal “ABCD” contains the four bytes 41h, 42h, 43h, and 44h.
			
		3.1.9. Directives:
			+ A directive is command embedded in source code that is recognized and acted upon by the assembler. \
				Directives do not execute at runtime, \
				But they let you define variables, macros, and procedures.
				
			+ They can assign names to memory segments and perform many other housekeeping tasks related to the assembler. \
				Directives are not, by default, case sensitive. \
				For example, .data, .DATA, and .Data are equivalent.
				
			+ The following example helps to show the difference directives and instructions. \
				The DWORD directive tells the assembler to RESERVE space in the program for a doubleword variable. \
				The MOV instruction, on the other hand, executes at runtime, \
				copying the contents of myVar to the EAX register:
					
				myVar DWORD 26
				mov eax, myVar
				
			+ Although all assemblers for Intel processors share the same instruction set, \
				they ussually have different sets of directives. 
				
			3.1.9.1. Defining Segments:
				+ DEFINING SEGMENTS One important function of assembler is to define program sections, or segments. \
					Segments are sections of a program that have different purposes. \
					For example, one segment can be used to define variables, and is identified by the .DATA directive:
					.data 
					
				+ The .CODE directive identifies the area of a program containing executable instructions:
					.code
					
				+ The .STACK directive identifies the area of a program holding the runtime stack, setting its size:
					.stack 100h
					
		3.1.10. Instructions:
			+ An instruction is a statement that becomes executable when a program is assembled. \
				Instructions are translated by the assembler into machine language bytes, \
				which are loaded and executed by the CPU at runtime. \
				An instruction contains four basic parts:
					
				+ Label (optional).
				+ Instruction mnemonic (required).
				+ Operand(s) (ussually required).
				+ Comment(optional).
				
			+ This is how the different parts are arranged:
				[label:] mnemonic [operands] [;comment]

			3.1.10.1. Label:
				+ A label is identifier that acts as a place marker for instructions and data. \
					A label placed just BEFORE an instruction implies the INSTRUCTION'S ADDRESS.
					
				+ similar, a label placed just BEFORE a variable implies the VARIABLE'S ADDRESS.
				
				+ There are two types of labels: DATA labels and CODE labels.
				
				+ A data label identifies the location of a variable, \	
					providing a convenient way to reference the variable in code. \
					The following, for example, defines a variable named count:
					count DWORD 100
					
				+ The assembler assigns a numberic address to each label. 
				+ It is possible to define multiple data items following a label.
				+ In the following example, array defines the location of the first number (1024). \
					The other numbers following in memory immediately afterward:
					
					array DWORD 1024, 2048
						  DWORD 4096, 8192
						  
				+ A code label in the code area of a program must end with a colon (:) character.
				+ Code labels are used as targets of jumping and looping instructions. For example:
					target:
						mov ax,bx
						...
						jmp target
						
				+ A code label can share the same line with an instruction, \
					or it can be on a line by itself:
					
					L1: mov ax,bx
					L2:
	3.4. Defining Data:
		3.4.1. Intrinsic Data types:
			+ The assembler recognizes a basic set of intrinsic data types, \
				which describe types in terms of their size (byte, word, doubleword, and so on).
				
				Type 			Usage
				BYTE 			8-bit unsigned integer. B stands for byte
				SBYTE 			8-bit signed integer. S stands for signed
				WORD 			16-bit unsigned integer
				SWORD 			16-bit signed integer
				DWORD 			32-bit unsigned integer. D stands for double
				SDWORD 			32-bit signed integer. SD stands for signed double
				FWORD 			48-bit integer (Far pointer in protected mode)
				QWORD 			64-bit integer. Q stands for quad
				TBYTE 			80-bit (10-byte) integer. T stands for Ten-byte
				REAL4 			32-bit (4-byte) IEEE short real
				REAL8 			64-bit (8-byte) IEEE long real
				REAL10 			80-bit (10-byte) IEEE extended real

		3.4.2. Data definition Statement:
			+ A data definition statement sets aside storage in memory for a variable, with an optional name.
			+ Data definition statements create variables based in intrinsic data types. \
				A data definition has the following syntax:
					
				[name] directive initializer [,initializer]...

			+ This is an example of a data definition statement:
				count DWORD 12345

			+ Directive The directive in a data definition statement can be BYTE, WORD, DWORD, SBYTE, SWORD,  \
				or any of the types listed in the top table. \
				In addition, it can be any of the legacy data definition directives shown:
					
				Directive 		Usage
				DB 				8-bit integer
				DW 				16-bit integer
				DD 				32-bit integer or real
				DQ 				64-bit integer or real
				DT 				define 80-bit (10-byte) integer

			+ Initializer, At least one initializer is required in a data definition, even if it is zero. \
				Additional initializers, if any, are separated by commas.
			
			3.4.2.1. Multiple Initializers:
				+ If Multiple Initializers are used in the same data definition, \
					its label refers only to the offset of the first initializer.
					
				+ In the following example, assume list is located at offset 0000. \
					If so, the value 10 is at offset 0000, 20 is at offset 0001, 30 is at offset 0002, and 40 is at offset 0003:
						
					list BYTE 10,20,30,40

					+ Memory layout of a byte sequence:
						Offset		Value
						0000:		10
						0001:		20
						0002:		30
						0003:		40

				+ Not all data definitions require labels. \
					To continue the array of bytes begun with list, for example, \
					we can define additional bytes on the next lines:
					
					list BYTE 10,20,30,40
						 BYTE 50,60,70,80
						 BYTE 81,82,83,84
						 
			3.4.2.2. Defining Strings:
				+ To define a string of characters, onclose them in single or double quotation marks. \
					The most common type of string ends with a null byte (containing 0). \
					called a null-terminated string, \
					strings of this type are used in many programming languages:
						
					greeting1 BYTE "Good afternoon",0
					greeting2 BYTE 'Good night',0
					
				+ Each character uses a byte of storage.
				
				+ Strings are an exception to the rule that byte values must be separated by commas. \
					Without that exception, greeting1 would have to be defined as:
						
					greeting1 BYTE 'G','o','o','d'....etc.

			3.4.2.3. DUP Operator:
				+ The DUP operator allocates storage for multiple data items, using a integer expression as a counter.
				+ It is particularly useful when allocating space for a string or array, and can be used with initialized or uninitialized data:
					BYTE 20 DUP(0) 		; 20 bytes, all equal to zero
					BYTE 20 DUP(?) 		; 20 bytes, uninitialized
					BYTE 4 DUP("STACK") ; 20 bytes: "STACKSTACKSTACKSTACK"
		
	3.5. Symbolic constants:
		3.5.3. EQU directive:
			+ The EQU directive associates a symbolic name with an integer expression or some arbitrary text.
				There are three formats:
				
				name EQU expression
				name EQU symbol
				name EQU <text>