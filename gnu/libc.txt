Book: The GNU C Library Reference Manual

34. Debugging support:
	+ Applications are usually debugged using dedicated debugger programs. \
	 	But sometimes this is not possible and, \
		in any case, it is useful to provide the developer with as much information as possible \
		at the time the problems are experienced.
		
	+  For this reason a few functions are provided which a program can use to help the developer more easily locate the problem.
	34.1. Backtraces:
		+ A BACKTRACE IS A LIST of the function calls that are currently active in a thread.
		+ The usual way to inspect a backtrace of a program is to use an external debugger such as gdb. \
			However, sometimes it is useful to obtain a backtrace programmatically from within a program. \
			e.g., for the purposes of logging or diagnostics.

		+ The header file execinfo.h declares three functions \
			that obtain and manipulate backtraces of the CURRENT THREAD.
			
			+ int backtrace (void **buffer, int size)
				+ The backtrace function obtains a backtrace for the current thread, \
					as a list of pointers, \
					and places the information into buffer.
					
				+ The argument size should be the number of void * elements that will fit into buffer.
				+ The return value is the actual number of entries of buffer that are obtained, \
					and is at most size.
					
				+ The pointers placed in buffer are actually return addresses obtained by inspecting the stack, \
					ONE RETURN ADDRESS PER STACK FRAME.

				+ Note:
					+ That certain compiler optimizations may interfere with obtaining a valid backtrace.
					+ Function inlining causes the inlined function to not have a stack frame;
					+ Frame pointer elimination will stop backtrace from interpreting the stack contents correctly.
						+ using: -fno-omit-frame-pointer build flag.

			+ char ** backtrace_symbols (void *const *buffer, int size)
				+ The backtrace_symbols function translates the information \
					obtained from the backtrace function into an array of strings.
					
				+ The return value is a pointer to an array of strings, \
					which has size entries just like the array buffer. \
					Each string contains a printable representation of the corresponding element of buffer.
					
				+ Currently, the function name and offset can only be obtained on systems that use the ELF binary format for programs and libraries.
				
				+  Also, you may need to pass ADDITIONAL FLAGS to the linker to make the function names available to the program.
					(For example, on systems using GNU ld, you must pass -rdynamic.)
					
				+ The return value of backtrace_symbols is a pointer obtained via the malloc function,
					and it is the responsibility of the caller to FREE that pointer.
				
			+ void backtrace_symbols_fd (void *const *buffer, int size, int fd)	
				+ The backtrace_symbols_fd function performs the same translation as the function backtrace_symbols function. \
					Instead of returning the strings to the caller, \
					it writes the strings to the file descriptor fd, one per line.
					
				+ Note that the array to contain the return addresses returned by backtrace is allocated on the stack.
				